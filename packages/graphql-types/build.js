module.exports=function(n){var t={};function e(a){if(t[a])return t[a].exports;var r=t[a]={i:a,l:!1,exports:{}};return n[a].call(r.exports,r,r.exports,e),r.l=!0,r.exports}return e.m=n,e.c=t,e.d=function(n,t,a){e.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:a})},e.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},e.t=function(n,t){if(1&t&&(n=e(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var a=Object.create(null);if(e.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var r in n)e.d(a,r,function(t){return n[t]}.bind(null,r));return a},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},e.p="",e(e.s=1)}([function(n,t){n.exports='type Query\n\ntype Mutation\n\nschema {\n  query: Query\n  mutation: Mutation\n}\n\nenum AccountType {\n  CHECKING\n  SAVINGS\n  LOAN\n  CREDIT_CARD\n  LINE_OF_CREDIT\n  MORTGAGE\n  INVESTMENT\n  PRE_PAID_CARD\n  CERTIFICATE\n}\n\ninterface Account {\n  """\n  The account ID is a persistent and unique identifier for the account.\n  It must be unique for all users across the institution and remain the\n  same over the life of the account.\n  """\n  id: ID!\n  accountNumber: String\n  name: String\n  type: AccountType\n  actualBalance: Float\n  availableBalance: Float\n  transactions(limit: Int = 10, categoryId: ID, query: String): [Transaction!]!\n}\n\ninterface InterestBearingAccount {\n  apy: Float\n}\n\ntype CheckingAccount implements Account & InterestBearingAccount {\n  id: ID!\n  accountNumber: String\n  name: String\n  type: AccountType\n  actualBalance: Float\n  availableBalance: Float\n  routingNumber: String\n  transactions(limit: Int = 10, categoryId: ID, query: String): [Transaction!]!\n  apy: Float\n}\n\ntype SavingsAccount implements Account & InterestBearingAccount {\n  id: ID!\n  accountNumber: String\n  name: String\n  type: AccountType\n  actualBalance: Float\n  availableBalance: Float\n  routingNumber: String\n  transactions(limit: Int = 10, categoryId: ID, query: String): [Transaction!]!\n  regDRemaining: Int\n  apy: Float\n}\n\ntype CertificateAccount implements Account & InterestBearingAccount {\n  id: ID!\n  accountNumber: String\n  name: String\n  type: AccountType\n  actualBalance: Float\n  availableBalance: Float\n  routingNumber: String\n  transactions(limit: Int = 10, categoryId: ID, query: String): [Transaction!]!\n  apy: Float\n}\n\ntype InvestmentAccount implements Account {\n  id: ID!\n  accountNumber: String\n  name: String\n  type: AccountType\n  actualBalance: Float\n  availableBalance: Float\n  routingNumber: String\n  transactions(limit: Int = 10, categoryId: ID, query: String): [Transaction!]!\n}\n\ntype LoanPayment {\n  nextDueDate: Date\n  amount: Float\n}\n\ninterface AbstractLoanAccount {\n  apr: Float\n  nextPayment: LoanPayment\n  originationDate: Date\n  payoff: Float\n  secured: Boolean\n}\n\ntype LoanAccount implements Account & AbstractLoanAccount {\n  id: ID!\n  accountNumber: String\n  name: String\n  type: AccountType\n  actualBalance: Float\n  availableBalance: Float\n  routingNumber: String\n  transactions(limit: Int = 10, categoryId: ID, query: String): [Transaction!]!\n  apr: Float\n  nextPayment: LoanPayment\n  originationDate: Date\n  secured: Boolean\n  payoff: Float\n}\n\ninterface OpenLoanAccount {\n  limit: Float\n}\n\ntype LineOfCreditAccount implements Account & AbstractLoanAccount & OpenLoanAccount {\n  id: ID!\n  accountNumber: String\n  name: String\n  type: AccountType\n  actualBalance: Float\n  availableBalance: Float\n  routingNumber: String\n  transactions(limit: Int = 10, categoryId: ID, query: String): [Transaction!]!\n  apr: Float\n  nextPayment: LoanPayment\n  limit: Float\n  secured: Boolean\n  originationDate: Date\n  payoff: Float\n}\n\ntype CreditCardAccount implements Account & AbstractLoanAccount & OpenLoanAccount {\n  id: ID!\n  accountNumber: String\n  name: String\n  type: AccountType\n  actualBalance: Float\n  availableBalance: Float\n  routingNumber: String\n  transactions(limit: Int = 10, categoryId: ID, query: String): [Transaction!]!\n  apr: Float\n  nextPayment: LoanPayment\n  limit: Float\n  secured: Boolean\n  originationDate: Date\n  payoff: Float\n}\n\nextend type Query {\n  account(id: ID!): Account\n}\n\nenum AddressType {\n  HOME\n  MAILING\n  WORK\n  TEMPORARY\n  PREVIOUS\n}\n\ninput AddressInput {\n  street1: String!\n  street2: String\n  city: String!\n  state: String!\n  zipCode: String!\n}\n\ntype Address {\n  type: AddressType\n  street1: String!\n  street2: String\n  city: String!\n  state: String!\n  zipCode: String!\n}\n\nenum ContactType {\n  ADDRESS\n  PHONE\n  EMAIL\n}\n\ninterface ContactPoint {\n  type: ContactType\n}\n\ntype ContactAddress implements ContactPoint {\n  type: ContactType\n  address: Address\n}\n\nenum PhoneType {\n  HOME\n  WORK\n  MOBILE\n  PAGER\n  FAX\n  OTHER\n}\n\ntype ContactPhone implements ContactPoint {\n  type: ContactType\n  phoneType: PhoneType!\n  number: String!\n  extension: String\n  description: String\n  smsRegistered: Boolean\n}\n\nenum EmailType {\n  HOME\n  WORK\n  OTHER\n}\n\ntype ContactEmail implements ContactPoint {\n  type: ContactType\n  emailType: EmailType!\n  emailAddress: String!\n}\n\ntype DemonstratedAccess {\n  dateTime: Date!\n  userId: ID!\n}\n\ntype Contact implements Node {\n  id: ID!\n  type: ContactType\n  contactPoint: ContactPoint!\n  demonstratedAccess: DemonstratedAccess\n}\n\nextend type Mutation {\n  updateContact(id: ID!, address: AddressInput): Contact\n}\n\ninterface Node {\n  id: ID!\n}\n\nextend type Query {\n  node(id: ID!, type: String!): Node\n}\n\ninterface Party {\n  id: ID!\n  accounts: [Account]\n  contacts: [Contact]\n}\n\ntype Person implements Party {\n  id: ID!\n  accounts: [Account]\n  contacts: [Contact]\n  firstName: String!\n  lastName: String!\n}\n\ntype Organization implements Party {\n  id: ID!\n  accounts: [Account]\n  contacts: [Contact]\n  name: String!\n}\n\nextend type Mutation {\n  updateAddress(type: String, address: AddressInput!): Address\n  updatePartyAddress(partyId: ID!, type: String, address: AddressInput!): Address\n}\n\nscalar Date\n\ntype Category {\n  id: ID!\n  name: String!\n}\n\ntype Merchant {\n  id: ID!\n  name: String!\n}\n\nenum TransactionStatus {\n  POSTED\n  PENDING\n  DENIED\n  VOID\n}\n\nenum TransactionType {\n  CREDIT\n  DEBIT\n}\n\ntype Message {\n  messageMarkdown: String\n  url: String\n}\n\ntype Transaction {\n  id: ID!\n  date: Date!\n  description: String!\n  amount: Float!\n  type: TransactionType!\n  balance: Float\n  status: TransactionStatus\n  category: Category\n  merchant: Merchant\n  message: Message\n  account: Account\n}\n\nextend type Query {\n  category(id: ID): Category\n  transaction(id: ID!): Transaction\n}\n\ntype User {\n  id: ID!\n  accounts: [Account]\n  party: Party\n}\n\nextend type Query {\n  me: User\n}\n'},function(n,t,e){"use strict";e.r(t);var a=e(0),r=e.n(a);e.d(t,"default",function(){return r.a})}]);