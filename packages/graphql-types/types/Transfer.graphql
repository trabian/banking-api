type Transfer {
  id: ID!

  # The source account
  source: Account

  # The destination account
  destination: Account

  amount: Money!

  frequency: String

  startDate: Date
  endDate: Date

  nextScheduledTransferDate: Date
}

enum TransferAccountType {
  INTERNAL
  EXTERNAL
}

input TransferAccountInput {
  type: TransferAccountType!
  id: ID!
}

input TransferInput {
  source: TransferAccountInput!
  destination: TransferAccountInput!
  amount: Money!
  frequency: String
  startDate: Date
  endDate: Date
}

type TransferEdge {
  cursor: String
  node: Transfer!
}

type TransferConnection {
  edges: [TransferEdge]
  pageInfo: PageInfo
}

extend type User {
  transferConnection(limit: Int = 10, cursor: String): TransferConnection!
}

extend type Query {
  transfer(id: ID!): Transfer
}

extend type Mutation {
  """
  Create a transfer
  """
  createTransfer(transfer: TransferInput!): Transfer

  """
  Update a transfer
  """
  updateTransfer(id: ID!, transfer: TransferInput!): Transfer
}
