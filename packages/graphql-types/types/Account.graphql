enum AccountType {
  CHECKING
  SAVINGS
  LOAN
  CREDIT_CARD
  LINE_OF_CREDIT
  MORTGAGE
  INVESTMENT
  PRE_PAID_CARD
  CERTIFICATE
}

interface Account {
  """
  The account ID is a persistent and unique identifier for the account.
  It must be unique for all users across the institution and remain the
  same over the life of the account.
  """
  id: ID!

  """
  The account number (or a masked portion there-of) will be displayed to the
  user. Like the ID, it must be unique for all users across the institution
  and remain the same over the life of the account. It may contain a prefix to
  define the Account Type for consumption, such as SV-1234 or IL-1234.
  """
  accountNumber: String

  """
  A masked version of the account number.
  """
  accountNumberMasked: String

  """
  The account name is the textual representation of the account. This
  value is visible to the user and must be human-readable.
  """
  name: String

  nickname: String

  """
  Negative, zero or positive amount. If this is a loan, any balance owed to
  the financial institution will show as a positive amount. If this is a
  deposit product, if the product is overdrawn it will be a negative amount.
  Positive is assumed if the sign does not appear in the data.
  """
  actualBalance: Money

  """
  Negative, zero or positive amount. If this is a loan, any balance owed
  to the financial institution will show as a positive amount. If this is
  a deposit product, if the product is overdrawn it will be a negative amount.
  Positive is assumed if the sign does not appear in the data.
  """
  availableBalance: Money

  """
  The transactions for this account
  """
  transactionConnection(
    limit: Int = 10
    categoryId: ID
    query: String
    cursor: String
  ): TransactionConnection

  """
  Whether transfers are allowed from this account.
  """
  transferFrom: Boolean

  """
  Whether transfers are allowed to this account.
  """
  transferTo: Boolean
}

interface InternalAccount {
  id: ID!
  name: String
  nickname: String
  accountNumber: String
  accountNumberMasked: String
  actualBalance: Money
  availableBalance: Money
  transactionConnection(
    limit: Int = 10
    categoryId: ID
    query: String
    cursor: String
  ): TransactionConnection
  transferFrom: Boolean
  transferTo: Boolean

  type: AccountType

  """
  This is a human-friendly description of the account type. It also provides a way
  to present provider-specific names that may not fit in a pre-defined list, such as
  'Special Savings'.
  """
  typeDescription: String

  transferConnection(limit: Int = 10, cursor: String): TransferConnection

  message: Message
}

interface InterestBearingAccount {
  apy: Float
}

type CheckingAccount implements Account & InternalAccount & InterestBearingAccount & Node {
  id: ID!
  accountNumber: String
  accountNumberMasked: String
  name: String
  nickname: String
  type: AccountType
  typeDescription: String
  actualBalance: Money
  availableBalance: Money
  routingNumber: String

  transactionConnection(
    limit: Int = 10
    categoryId: ID
    query: String
    cursor: String
  ): TransactionConnection

  """
  Whether transfers are allowed from this account.
  """
  transferFrom: Boolean

  """
  Whether transfers are allowed to this account.
  """
  transferTo: Boolean

  transferConnection(limit: Int = 10, cursor: String): TransferConnection

  message: Message

  apy: Float
}

type SavingsAccount implements Account & InternalAccount & InterestBearingAccount & Node {
  id: ID!
  accountNumber: String
  accountNumberMasked: String
  name: String
  nickname: String
  type: AccountType
  typeDescription: String
  actualBalance: Money
  availableBalance: Money
  routingNumber: String
  message: Message

  transactionConnection(
    limit: Int = 10
    categoryId: ID
    query: String
    cursor: String
  ): TransactionConnection

  """
  Whether transfers are allowed from this account.
  """
  transferFrom: Boolean

  """
  Whether transfers are allowed to this account.
  """
  transferTo: Boolean

  transferConnection(limit: Int = 10, cursor: String): TransferConnection

  """
  Number of remaining transactions according to [Reg D](https://en.wikipedia.org/wiki/Regulation_D_(FRB)).
  """
  regDRemaining: Int

  apy: Float
}

type CertificateAccount implements Account & InternalAccount & InterestBearingAccount & Node {
  id: ID!
  accountNumber: String
  accountNumberMasked: String
  name: String
  nickname: String
  type: AccountType
  typeDescription: String
  actualBalance: Money
  availableBalance: Money
  routingNumber: String
  message: Message

  """
  Whether transfers are allowed from this account.
  """
  transferFrom: Boolean

  """
  Whether transfers are allowed to this account.
  """
  transferTo: Boolean

  transferConnection(limit: Int = 10, cursor: String): TransferConnection

  transactionConnection(
    limit: Int = 10
    categoryId: ID
    query: String
    cursor: String
  ): TransactionConnection

  apy: Float
}

type InvestmentAccount implements Account & InternalAccount & Node {
  id: ID!
  accountNumber: String
  accountNumberMasked: String
  name: String
  nickname: String
  type: AccountType
  typeDescription: String
  actualBalance: Money
  availableBalance: Money
  routingNumber: String

  transactionConnection(
    limit: Int = 10
    categoryId: ID
    query: String
    cursor: String
  ): TransactionConnection

  """
  Whether transfers are allowed from this account.
  """
  transferFrom: Boolean

  """
  Whether transfers are allowed to this account.
  """
  transferTo: Boolean

  transferConnection(limit: Int = 10, cursor: String): TransferConnection

  message: Message
}

type LoanPayment {
  nextDueDate: Date
  amount: Money
}

interface AbstractLoanAccount {
  apr: Float
  nextPayment: LoanPayment
  originationDate: Date
  payoff: Money
  secured: Boolean
}

type LoanAccount implements Account & InternalAccount & AbstractLoanAccount & Node {
  id: ID!
  accountNumber: String
  accountNumberMasked: String
  name: String
  nickname: String
  type: AccountType
  typeDescription: String
  actualBalance: Money
  availableBalance: Money
  routingNumber: String
  message: Message

  transactionConnection(
    limit: Int = 10
    categoryId: ID
    query: String
    cursor: String
  ): TransactionConnection

  """
  Whether transfers are allowed from this account.
  """
  transferFrom: Boolean

  """
  Whether transfers are allowed to this account.
  """
  transferTo: Boolean

  transferConnection(limit: Int = 10, cursor: String): TransferConnection

  apr: Float
  nextPayment: LoanPayment
  originationDate: Date
  secured: Boolean
  payoff: Money
}

interface OpenLoanAccount {
  limit: Money
}

type LineOfCreditAccount implements Account & InternalAccount & AbstractLoanAccount & OpenLoanAccount & Node {
  id: ID!
  accountNumber: String
  accountNumberMasked: String
  name: String
  nickname: String
  type: AccountType
  typeDescription: String
  actualBalance: Money
  availableBalance: Money
  routingNumber: String
  message: Message

  transactionConnection(
    limit: Int = 10
    categoryId: ID
    query: String
    cursor: String
  ): TransactionConnection

  """
  Whether transfers are allowed from this account.
  """
  transferFrom: Boolean

  """
  Whether transfers are allowed to this account.
  """
  transferTo: Boolean

  transferConnection(limit: Int = 10, cursor: String): TransferConnection

  apr: Float
  nextPayment: LoanPayment
  limit: Money
  secured: Boolean
  originationDate: Date
  payoff: Money
}

type CreditCardAccount implements Account & InternalAccount & AbstractLoanAccount & OpenLoanAccount & Node {
  id: ID!
  accountNumber: String
  accountNumberMasked: String
  name: String
  nickname: String
  type: AccountType
  typeDescription: String
  actualBalance: Money
  availableBalance: Money
  routingNumber: String
  message: Message

  transactionConnection(
    limit: Int = 10
    categoryId: ID
    query: String
    cursor: String
  ): TransactionConnection

  """
  Whether transfers are allowed from this account.
  """
  transferFrom: Boolean

  """
  Whether transfers are allowed to this account.
  """
  transferTo: Boolean

  transferConnection(limit: Int = 10, cursor: String): TransferConnection

  apr: Float
  nextPayment: LoanPayment
  limit: Money
  secured: Boolean
  originationDate: Date
  payoff: Money
}

extend type Query {
  account(id: ID!): Account
}
