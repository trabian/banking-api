type User {
  """
  The user ID is persistent and unique across the institution and remains the
  same over the life of the user.
  """
  id: ID!

  """
  The `relationship` represents the user's relationship(s) to the FI. It exists as a separate type
  from "User" and accepts an optional `relationshipId` because some banking systems allow users
  to have access to multiple "accounts", which then have "subaccounts". We attempt to reduce
  this confusion by referring to each of those "accounts" as separate "relationships" and referring
  to the "subaccounts" as "accounts".
  """
  relationship(relationshipId: ID): Relationship

  relationships: [Relationship!]!

  """
  The `customer` represents the user's role as a customer of the FI. It exists as a separate type
  from "User" and accepts an optional `customerId` because some banking systems allow users
  to have access to multiple "accounts", which then have "subaccounts". We attempt to reduce
  this confusion by referring to each of those "accounts" as separate "customers" and referring
  to the "subaccounts" as "accounts".
  """
  customer(customerId: ID): Customer

  """
  Customers this user has access to.
  """
  customers: [Customer!]!

  party: Party!

  """
  This is the date the user either joined or was created within the system.
  """
  createdAt: DateTime!
}

"""
A `Relationship` is a distinct set of accounts (and agreements) between a specific
person or company and a financial institution. For example, a person may have a
group of accounts that are shared with a spouse while also having independent
accounts for a sole proprietorship. That same person may also have access to the
accounts of a corporation which are associated via another relationship.
"""
type Relationship {
  id: ID!
  nickname: String
  accounts: [Account!]!
  account(id: ID!): Account
  primary: Boolean!
}

type Customer {
  id: ID!
  name: String!
  accounts: [Account!]!
  account(id: ID!): Account
  representative: Party!
}

extend type Query {
  me: User
}
